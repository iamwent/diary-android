apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


static def gitVersionCode() {
    def cmd = 'git rev-list HEAD --count'
    cmd.execute().text.trim().toInteger()
}

static def gitVersionTag() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()

    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern

    if (matcher) {
        version = version.substring(0, matcher.start()) + "." + matcher[0][1]
    } else {
        version = version + ".0"
    }

    return version
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.iamwent.diary"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 2
        versionName "1.0.2"

        manifestPlaceholders = [FABRIC_KEY: FABRIC_KEY]

        resConfigs "en", "zh"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file(DEBUG_PATH)
            storePassword DEBUG_PASSWORD
            keyAlias DEBUG_ALIAS
            keyPassword DEBUG_PASSWORD
        }

        release {
            storeFile file(KEYSTORE_PATH)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            debuggable false
            minifyEnabled true
            useProguard true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        // Avoid heavy computations
        applicationVariants.all { variant ->
            if (variant.buildType.name == 'release') {

                def code = gitVersionCode();
                def name = gitVersionTag();

                variant.mergedFlavor.versionCode = code;
                variant.mergedFlavor.versionName = name;

                variant.outputs.each { output ->
                    def outputFile = output.outputFile;

                    def suffix = variant.productFlavors[0].name;
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "Diary_${name}_${code}_${suffix}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    productFlavors {
        google {
        }
        fir {
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' &&
                variant.getFlavors().get(0).name == 'mock') {
            // remove mock release
            variant.setIgnore(true);
        }
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        ignore 'InvalidPackage'
    }
}

dependencies {
    compile('com.android.support:recyclerview-v7:25.2.0'){
        exclude module: 'appcompat-v4'
    }
    compile('uk.co.chrisjenx:calligraphy:2.2.0') {
        exclude module: 'support-v4'
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}